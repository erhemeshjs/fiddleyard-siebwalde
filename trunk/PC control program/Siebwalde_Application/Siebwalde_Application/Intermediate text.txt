LLed_Heart
LLed_F11
LLed_EOS10
LLed_EOS11
LLed_F13
LLed_F12
LLed_Block5B
LLed_Block8A
LLed_TrackPower
LLed_Block5BIn
LLed_Block6In
LLed_Block7In
LLed_Resistor
LLed_Track1
LLed_Track2
LLed_Track3
LLed_Track4
LLed_Track5
LLed_Track6
LLed_Track7
LLed_Track8
LLed_Track9
LLed_Track10
LLed_Track11
LLed_Block6
LLed_Block7
LLed_15VTrackPower
LLed_F10
LLed_M10
Track_No
Train_Detection
Fiddle_Yard_Stopped


			CL10Heart = new SensorBoolUpdater();
            F11 = new SensorBoolUpdater();
            EOS10 = new SensorBoolUpdater();
            EOS11 = new SensorBoolUpdater();
            F13 = new SensorBoolUpdater();
            F12 = new SensorBoolUpdater();
            Block5B = new SensorBoolUpdater();
            Block8A = new SensorBoolUpdater();
            TrackPowerTop = new SensorBoolUpdater();
            Block5BIn = new SensorBoolUpdater();
            Block6In = new SensorBoolUpdater();
            Block7In = new SensorBoolUpdater();
            ResistorTop = new SensorBoolUpdater();
            Track1Top = new SensorBoolUpdater();
            Track2Top = new SensorBoolUpdater();
            Track3Top = new SensorBoolUpdater();
            Track4Top = new SensorBoolUpdater();
            Track5Top = new SensorBoolUpdater();
            Track6Top = new SensorBoolUpdater();
            Track7Top = new SensorBoolUpdater();
            Track8Top = new SensorBoolUpdater();
            Track9Top = new SensorBoolUpdater();
            Track10Top = new SensorBoolUpdater();
            Track11Top = new SensorBoolUpdater();
            Block6 = new SensorBoolUpdater();
            Block7 = new SensorBoolUpdater();
            F10 = new SensorBoolUpdater();
            M10 = new SensorBoolUpdater();
            TrackNoTop = new SensorBoolUpdater();
            TrainDetectionTop = new SensorBoolUpdater();
            FiddleYardStoppedTop = new SensorBoolUpdater();

            CL20Heart = new SensorBoolUpdater();
            F21 = new SensorBoolUpdater();
            EOS20 = new SensorBoolUpdater();
            EOS21 = new SensorBoolUpdater();
            F23 = new SensorBoolUpdater();
            F22 = new SensorBoolUpdater();
            Block16B = new SensorBoolUpdater();
            Block19A = new SensorBoolUpdater();
            TrackPowerBot = new SensorBoolUpdater();
            Block16BIn = new SensorBoolUpdater();
            Block17In = new SensorBoolUpdater();
            Block18In = new SensorBoolUpdater();
            ResistorBot = new SensorBoolUpdater();
            Track1Bot = new SensorBoolUpdater();
            Track2Bot = new SensorBoolUpdater();
            Track3Bot = new SensorBoolUpdater();
            Track4Bot = new SensorBoolUpdater();
            Track5Bot = new SensorBoolUpdater();
            Track6Bot = new SensorBoolUpdater();
            Track7Bot = new SensorBoolUpdater();
            Track8Bot = new SensorBoolUpdater();
            Track9Bot = new SensorBoolUpdater();
            Track10Bot = new SensorBoolUpdater();
            Track11Bot = new SensorBoolUpdater();
            Block17 = new SensorBoolUpdater();
            Block18 = new SensorBoolUpdater();
            F20 = new SensorBoolUpdater();
            M20 = new SensorBoolUpdater();
            TrackNoBot = new SensorBoolUpdater();
            TrainDetectionBot = new SensorBoolUpdater();
            FiddleYardStoppedBot = new SensorBoolUpdater();
			
			TrackPower15V = new SensorBoolUpdater();
			
			
			
			
			
			
			
			
			
			
			
			
			CL10Heart.ChangeSensorBoolStatus(1);            
            F11.ChangeSensorBoolStatus(1);
            EOS10.ChangeSensorBoolStatus(1);
            EOS11.ChangeSensorBoolStatus(1);
            F13.ChangeSensorBoolStatus(1);
			
			TrackNoTop.ChangeSensorBoolStatus(0x10);
            F12.ChangeSensorBoolStatus(1);
            Block5B.ChangeSensorBoolStatus(1);
            Block8A.ChangeSensorBoolStatus(1);
			
            TrackPowerTop.ChangeSensorBoolStatus(1);
            Block5BIn.ChangeSensorBoolStatus(1);
            Block6In.ChangeSensorBoolStatus(1);
            Block7In.ChangeSensorBoolStatus(1);
            ResistorTop.ChangeSensorBoolStatus(1);
            Track1Top.ChangeSensorBoolStatus(1);
            Track2Top.ChangeSensorBoolStatus(1);
			
            Track4Top.ChangeSensorBoolStatus(1);
            Track5Top.ChangeSensorBoolStatus(1);
            Track6Top.ChangeSensorBoolStatus(1);
            Track7Top.ChangeSensorBoolStatus(1);
            Track8Top.ChangeSensorBoolStatus(1);
            Track9Top.ChangeSensorBoolStatus(1);
            Track10Top.ChangeSensorBoolStatus(1);
			
            Block6.ChangeSensorBoolStatus(1);
            Block7.ChangeSensorBoolStatus(1);
			TrackPower15V.ChangeSensorBoolStatus(1);
            F10.ChangeSensorBoolStatus(1);
            M10.ChangeSensorBoolStatus(1);  
			Track3Top.ChangeSensorBoolStatus(1);
			Track11Top.ChangeSensorBoolStatus(1);
			
            TrainDetectionTop.ChangeSensorBoolStatus(1);
            FiddleYardStoppedTop.ChangeSensorBoolStatus(1);

			
			
			
			
			
			
            CL20Heart.ChangeSensorBoolStatus(1);
            F21.ChangeSensorBoolStatus(1);
            EOS20.ChangeSensorBoolStatus(1);
            EOS21.ChangeSensorBoolStatus(1);
            F23.ChangeSensorBoolStatus(1);
			
			TrackNoBot.ChangeSensorBoolStatus(0x10);
            F22.ChangeSensorBoolStatus(1);
            Block16B.ChangeSensorBoolStatus(1);
            Block19A.ChangeSensorBoolStatus(1);
			
            TrackPowerBot.ChangeSensorBoolStatus(1);
            Block16BIn.ChangeSensorBoolStatus(1);
            Block17In.ChangeSensorBoolStatus(1);
            Block18In.ChangeSensorBoolStatus(1);
            ResistorBot.ChangeSensorBoolStatus(1);
            Track1Bot.ChangeSensorBoolStatus(1);
            Track2Bot.ChangeSensorBoolStatus(1);
			
            Track4Bot.ChangeSensorBoolStatus(1);
            Track5Bot.ChangeSensorBoolStatus(1);
            Track6Bot.ChangeSensorBoolStatus(1);
            Track7Bot.ChangeSensorBoolStatus(1);
            Track8Bot.ChangeSensorBoolStatus(1);
            Track9Bot.ChangeSensorBoolStatus(1);
            Track10Bot.ChangeSensorBoolStatus(1);
			
			Block17.ChangeSensorBoolStatus(1);
            Block18.ChangeSensorBoolStatus(1);
			TrackPower15V.ChangeSensorBoolStatus(1);
            F20.ChangeSensorBoolStatus(1);
            M20.ChangeSensorBoolStatus(1);  
			Track3Bot.ChangeSensorBoolStatus(1);
            Track11Bot.ChangeSensorBoolStatus(1);
			
			TrainDetectionBot.ChangeSensorBoolStatus(1);
            FiddleYardStoppedBot.ChangeSensorBoolStatus(1);

            #region cmd's string array
        string[] CmdToFY = new string[27] {
            "1" + "\r",               //  0  Track On
            "2" + "\r",               //  1  Track Off
            "3" + "\r",               //  2  Fiddle Track to the left track ++
            "4" + "\r",               //  3  Fiddle Track to the right track --
            "5" + "\r",               //  4  To track 1
            "6" + "\r",               //  5  To track 2
            "7" + "\r",               //  6  To track 3
            "8" + "\r",               //  7  To track 4
            "9" + "\r",               //  8  To track 5
            "A" + "\r",               //  9  To track 6
            "B" + "\r",               //  10  To track 7
            "C" + "\r",               //  11  To track 8
            "D" + "\r",               //  12 To track 9
            "E" + "\r",               //  13  To track 10
            "F" + "\r",               //  14  To track 11
            "G" + "\r",               //  15  Train Detection
            "H" + "\r",               //  16  Start Fiddle Yard
            "I" + "\r",               //  17  Stop Fiddle Yard
            "J" + "\r",               //  18  Stop Fiddle Yard Now (Reset)
            "K" + "\r",               //  19  Bezet_In_5B_Switch_On
            "L" + "\r",               //  20  Bezet_In_5B_Switch_Off
            "M" + "\r",               //  21  Bezet_In_6_Switch_On
            "N" + "\r",               //  22  Bezet_In_6_Switch_Off
            "O" + "\r",               //  23  Bezet_In_7_Switch_On
            "P" + "\r",               //  24  Bezet_In_7_Switch_Off
            "Q" + "\r",               //  25  Resume previous operation
            "R" + "\r"                //  26  Start Collect
        };
        #endregion cmd's string array
		
		
		
		
		
		
	      FiddleOneLeftTop;
          FiddleOneRightTop;
          FiddleMultipleLeftTop;
          FiddleMultipleRightTop;
          TrainDetectionTop;  
		  
          TrainDriveOutFinishedTop;
          TrainDriveInFinishedTop;
          InitDoneTop;
          InitStartedTop;
          TrainOn5BTop;
          TrainDriveInStartTop;
          TrainOn8ATop;
          TrainDriveOutStartTop;
          FiddleYardSoftStartTop;
		  
          FiddleYardStoppedTop;
		  
          FiddleYardResetTop;
          OccfromBlock6Top;
          SensorF12HighTop;
          OccfromBlock6AndSensorF12Top;
          TrainDriveInFailedF12Top;
          LastTrackTop;
          UniversalErrorTop;
          CollectFinishedFYFullTop;
          CollectOnTop;
          CollectOffTop;
          TrainDriveOutCancelledTop;
		  
		  
		  
		  
CL10Heart;
F11;		  
EOS10;		  
EOS11;		  
F13;		  
F12;		  
Block5B;		  
Block8A;		  
TrackPowerTop;		  
Block5BIn;		  
Block6In;
Block7In;
ResistorTop;
Track1Top;
Track2Top;
Track3Top;
Track4Top;
Track5Top;
Track6Top;
Track7Top;
Track8Top;
Track9Top;
Track10Top;
Track11Top;
Block6;
Block7;
F10;
M10;
TrackNoTop;





public Trk GetCL10Heart()
        {
            return TrackNo;
        }
        public Trk GetTrackPower()
        {
            return TrackNo;
        }
        public Trk GetM10()
        {
            return TrackNo;
        }
        public Trk GetResistor()
        {
            return TrackNo;
        }        
		
		
		
		
	
               
                
                Message Msg_FiddleMultipleLeftTop = new Message("FiddleMultipleLeftFinished", " Fiddle Multiple Left Finished ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().FiddleMultipleLeftTop.Attach(Msg_FiddleMultipleLeftTop);
                Message Msg_FiddleMultipleRightTop = new Message("FiddleMultipleRightFinished", " Fiddle Multiple Right Finished ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().FiddleMultipleRightTop.Attach(Msg_FiddleMultipleRightTop);
                Message Msg_TrainDetectionTop = new Message("TrainDetectionFinished", " Train Detection Finished ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainDetectionTop.Attach(Msg_TrainDetectionTop);
                Message Msg_TrainDriveOutFinishedTop = new Message("TrainDriveOutFinished", " Train Drive Out Finished ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainDriveOutFinishedTop.Attach(Msg_TrainDriveOutFinishedTop);
                Message Msg_TrainDriveInFinishedTop = new Message("TrainDriveInFinished", " Train Drive In Finished ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainDriveInFinishedTop.Attach(Msg_TrainDriveInFinishedTop);
                Message Msg_InitDoneTop = new Message("InitDone", " Init Done ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().InitDoneTop.Attach(Msg_InitDoneTop);
                Message Msg_InitStartedTop = new Message("InitStarted", " Init Started ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().InitStartedTop.Attach(Msg_InitStartedTop);
                Message Msg_TrainOn5BTop = new Message("TrainOn5B", " Train On 5B ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainOn5BTop.Attach(Msg_TrainOn5BTop);
                Message Msg_TrainDriveInStartTop = new Message("TrainDriveInStart", " Train Drive In Start ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainDriveInStartTop.Attach(Msg_TrainDriveInStartTop);
                Message Msg_TrainOn8ATop = new Message("TrainOn8A", " Train On 8A ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainOn8ATop.Attach(Msg_TrainOn8ATop);
                Message Msg_TrainDriveOutStartTop = new Message("TrainDriveOutStart", " Train Drive Out Start ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainDriveOutStartTop.Attach(Msg_TrainDriveOutStartTop);
                //Message Msg_FiddleYardSoftStartTop = new Message("FiddleYardSoftStart", " Fiddle Yard Soft Start ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                //m_iFYCtrl.GetIoHandler().FiddleYardSoftStartTop.Attach(Msg_FiddleYardSoftStartTop);
                //Message Msg_FiddleYardStoppedTop = new Message("FiddleYardStopped", " Fiddle Yard Stopped ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                //m_iFYCtrl.GetIoHandler().FiddleYardStoppedTop.Attach(Msg_FiddleYardStoppedTop);
                Message Msg_FiddleYardResetTop = new Message("FiddleYardReset", " Fiddle Yard Reset ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().FiddleYardResetTop.Attach(Msg_FiddleYardResetTop);
                Message Msg_OccfromBlock6Top = new Message("OccfromBlock6", " Occupied from Block6 ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().OccfromBlock6Top.Attach(Msg_OccfromBlock6Top);
                Message Msg_SensorF12HighTop = new Message("SensorF12High", " Message F12 High ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().SensorF12HighTop.Attach(Msg_SensorF12HighTop);
                Message Msg_OccfromBlock6AndSensorF12Top = new Message("OccfromBlock6AndSensorF12", " Occupied from Block6 And Message F12 High ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().OccfromBlock6AndSensorF12Top.Attach(Msg_OccfromBlock6AndSensorF12Top);
                Message Msg_TrainDriveInFailedF12Top = new Message("TrainDriveInFailedF12", " Train Drive In Failed F12 High ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainDriveInFailedF12Top.Attach(Msg_TrainDriveInFailedF12Top);
                Message Msg_LastTrackTop = new Message("LastTrack", " Last Track ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().LastTrackTop.Attach(Msg_LastTrackTop);
                Message Msg_UniversalErrorTop = new Message("UniversalError", " Universal Error ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().UniversalErrorTop.Attach(Msg_UniversalErrorTop);
                Message Msg_CollectFinishedFYFullTop = new Message("CollectFinishedFYFull", " Collect Finished FY Full ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().CollectFinishedFYFullTop.Attach(Msg_CollectFinishedFYFullTop);
                Message Msg_CollectOnTop = new Message("CollectOn", " Collect On ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().CollectOnTop.Attach(Msg_CollectOnTop);
                Message Msg_CollectOffTop = new Message("CollectOff", " Collect Off ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().CollectOffTop.Attach(Msg_CollectOffTop);
                Message Msg_TrainDriveOutCancelledTop = new Message("TrainDriveOutCancelled", " Train Drive Out Cancelled ", (name, log) => SetMessage(name, log)); // initialize and subscribe readback action, Message
                m_iFYCtrl.GetIoHandler().TrainDriveOutCancelledTop.Attach(Msg_TrainDriveOutCancelledTop);
		
		
		
				Sensor Led_CL_10_Heart = new Sensor("LLed_Heart", " CL 10 Heart ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().CL10Heart.Attach(Led_CL_10_Heart);
                Sensor Led_F11 = new Sensor("LLed_F11", " F11 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().F11.Attach(Led_F11);
                Sensor Led_EOS10 = new Sensor("LLed_EOS10", " EOS 10 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().EOS10.Attach(Led_EOS10);
                Sensor Led_EOS11 = new Sensor("LLed_EOS11", " EOS 11 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().EOS11.Attach(Led_EOS11);
                Sensor Led_F13 = new Sensor("LLed_F13", " F13 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().F13.Attach(Led_F13);
                Sensor Led_F12 = new Sensor("LLed_F12", " F12 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().F12.Attach(Led_F12);
                Sensor Led_Block5B = new Sensor("LLed_Block5B", " Occupied from 5B ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Block5B.Attach(Led_Block5B);
                Sensor Led_Block8A = new Sensor("LLed_Block8A", " Occupied from 8A ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Block8A.Attach(Led_Block8A);
                Sensor Led_TrackPowerTop = new Sensor("LLed_TrackPower", " Enable Track ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().TrackPowerTop.Attach(Led_TrackPowerTop);
                Sensor Led_Block5BIn = new Sensor("LLed_Block5BIn", " Occupied to 5B ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Block5BIn.Attach(Led_Block5BIn);
                Sensor Led_Block6In = new Sensor("LLed_Block6In", " Occupied to 6 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Block6In.Attach(Led_Block6In);
                Sensor Led_Block7In = new Sensor("LLed_Block7In", " Occupied to 7 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Block7In.Attach(Led_Block7In);
                Sensor Led_ResistorTop = new Sensor("LLed_Resistor", " Occupied Resistor ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().ResistorTop.Attach(Led_ResistorTop);
                Sensor Led_Track1Top = new Sensor("LLed_Track1", " Trains On Fiddle Yard Track1 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track1Top.Attach(Led_Track1Top);
                Sensor Led_Track2Top = new Sensor("LLed_Track2", " Trains On Fiddle Yard Track2 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track2Top.Attach(Led_Track2Top);
                Sensor Led_Track3Top = new Sensor("LLed_Track3", " Trains On Fiddle Yard Track3 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track3Top.Attach(Led_Track3Top);
                Sensor Led_Track4Top = new Sensor("LLed_Track4", " Trains On Fiddle Yard Track4 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track4Top.Attach(Led_Track4Top);
                Sensor Led_Track5Top = new Sensor("LLed_Track5", " Trains On Fiddle Yard Track5 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track5Top.Attach(Led_Track5Top);
                Sensor Led_Track6Top = new Sensor("LLed_Track6", " Trains On Fiddle Yard Track6 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track6Top.Attach(Led_Track6Top);
                Sensor Led_Track7Top = new Sensor("LLed_Track7", " Trains On Fiddle Yard Track7 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track7Top.Attach(Led_Track7Top);
                Sensor Led_Track8Top = new Sensor("LLed_Track8", " Trains On Fiddle Yard Track8 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track8Top.Attach(Led_Track8Top);
                Sensor Led_Track9Top = new Sensor("LLed_Track9", " Trains On Fiddle Yard Track9 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track9Top.Attach(Led_Track9Top);
                Sensor Led_Track10Top = new Sensor("LLed_Track10", " Trains On Fiddle Yard Track10 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track10Top.Attach(Led_Track10Top);
                Sensor Led_Track11Top = new Sensor("LLed_Track11", " Trains On Fiddle Yard Track11 ", 0, (name, val, log) => UpdateTrainsOnFY(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Track11Top.Attach(Led_Track11Top);
                Sensor Led_Block6 = new Sensor("LLed_Block6", " Occupied from 6 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Block6.Attach(Led_Block6);
                Sensor Led_Block7 = new Sensor("LLed_Block7", " Occupied from 7 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().Block7.Attach(Led_Block7);
                Sensor Led_F10 = new Sensor("LLed_F10", " F10 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().F10.Attach(Led_F10);
                Sensor Led_M10 = new Sensor("LLed_M10", " M10 ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().M10.Attach(Led_M10);
                Sensor Led_TrackNoTop = new Sensor("Track_No", " Track Nr ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().TrackNoTop.Attach(Led_TrackNoTop);
                Sensor Led_TrackPower15VTOP = new Sensor("LLed_15VTrackPower", " 15V Track Power ", 0, (name, val, log) => SetLedIndicator(name, val, log)); // initialize and subscribe sensors
                m_iFYCtrl.GetIoHandler().TrackPower15V.Attach(Led_TrackPower15VTOP);
		
		
		
		
		
		
		 CL_10_Heart =
		 F11 = false;
		 EOS10 = false
		 EOS11 = false
		 F13 = false;
		 F12 = false;
		 Block5B = fal
		 Block8A = fal
		 TrackPower = 
		 Block5BIn = f
		 Block6In = fa
		 Block7In = fa
		 Resistor = fa
		 Block6 = fals
		 Block7 = fals
		 F10 = false;
		 M10 = false;
		 TrackPower15V
		TrackNo = 0;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		